{
    "version": "2", <!-- document version -->
    "patterns": [ /* one or multiple patterns */
      {
          "name" : "testpattern", /* name of the pattern by which it will be identified */
          "architecture" : "ELF for Intel 386 (Executable); CPU-ID: 0" /* architecture information of the pattern architecture */
          "instructions" : [ /* one or mutliple instructions */
                {
                  "ea" : 0,
                  "mnem" : "mov[a-z]*",
                  "isRegex" : true, /* default = false, can be ommitted.
                                  if true mnemonic is treated as regex,
                                  useful if menomic can differ with similar semantic meaning */
                  "ops" : [{
                              "text" : "" /* operand text */
                          },
                          {
                              "text" : ""
                          }
                          ],
                "size" : 1, 
                "xrefs" : [
                      {
                          "target": 1, /* target of cross reference */
                          "isUnordinaryFlow": false, /* if long jump? default is false, can be ommitted if false */
                          "isData": false /* id data reference? default is false, can be ommitted if false */
                      }
                  ]
              },
            {
                "ea" : 1,
                "mnem" : "mov", /* mnemonic of the instruction */
                "ops" : [ /* one or multiple operands */
                    {
                        "text" : "A", /* text of the operand, constant or empty string for wildcard */
                        "nameIsTemplate" : true, /* if true, the name will be treated as a template,
                                                    so if two operands have the same 
                                                    name and both nameIsTemplate = true the second operand
                                                    must be equal to the first one to match */ 
                        "regs" : [ /* optional register names used in this operand */
                                    "r0" 
                                ]
                        "extractAs" : "$movOperandA",     /* if set the operands value will be extracted during match and
                                                    stored with the extractAs value */
                        "modified" : true,        /* the operand is modified by the instruction */
                        "used" : true            /* the operand is used by the instruction */
                        /* modified and used depend on the support by the processor module,
                        and are only used for data dependency graph based matching */ 
                    }
                ],
                "size" : 1,
                "xrefs" : [
                      {
                          "target": 2
                      }
                  ]
            },
            {
                "ea" : 2,
                "size" : 1,
                "mnem" : "sub",
                "ops" : [
                    {
                        "text" : ""
                    },
                    {
                        "regex" : "ea*", /* if not empty the regex will be used to match the disassembled operand */ 
                        "extractAs" : "$subParam"
                    }
                ]
            }
          ],
          "actions" : [ /* optional actions to be run when a match was found */
              {
              "script":"static matchedPatternAtEA(pattern,startEA,endEA) { 
                          Message(\"found pattern %s at from %a to %a\\n\",pattern,startEA,endEA);
                          Message(\"mov operand A: $movOperandA \\n parameter of sub:$subParam\\n\");
                     }" /* script which is executed as an IDC script in case of IDA.
                     Must include function 'static matchedPatternAtEA(pattern,ea)' which will be called
                     The names of extracted values are replaced by the value in the script source before
                     executing the idc script. Choose names which don't collide with the rest of the script. */
                 }
             ],
          "anchorTop" : false /* anchor position of the pattern, default is false -> bottom anchor */ 
      }  
    ]
}